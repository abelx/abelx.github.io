<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abelx's Blog</title>
    <description>New blog, just to record. # this means to ignore newlines until &quot;baseurl:&quot;
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Jun 2017 17:04:02 +0800</pubDate>
    <lastBuildDate>Thu, 22 Jun 2017 17:04:02 +0800</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>浅谈Jekyll</title>
        <description>&lt;p&gt;这里主要是介绍jekyll的结构和使用，默认已经安装好。&lt;/p&gt;
&lt;h2 id=&quot;jekyll是什么&quot;&gt;Jekyll是什么&lt;/h2&gt;
&lt;p&gt;Jekyll是一个基于Ruby的解析引擎，它可以用于将各种模板语言构建成一个静态网站，如templates, partials, liquid, markdown 等。也就是一个简单的类博客形态的静态网站的生产机器。所以，Jekyll的主要工作就是&lt;strong&gt;把一个目录下的文件按照一定的格式和规则生成静态html文件&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;jekyll用到其他技术&quot;&gt;Jekyll用到其他技术&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;YAML&lt;/strong&gt; Jekyll中每一个模板和内容文件都应该有一个YAML格式的文件头，那么YAML是什么呢？它是一种用来写配置文件的语言，如_config.yml就是YAML写的一个配置文件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;markdown和textile&lt;/strong&gt; markdown和textile是一个类型的标记语言，特点是简单易学习，他可以解析成html，由于我主要用的是markdown，所以接下来在内容解析方面我们只讲markdown。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Liquid&lt;/strong&gt; Liquid是一种标记语言，他主要是嵌入html文件中得到模板文件，连接了数据和页面，经过解析之后得到静态的html，然后再加上css和js就得到了最终的博客页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyll如何解析文件&quot;&gt;Jekyll如何解析文件&lt;/h3&gt;

&lt;p&gt;Jekyll只是一个解析引擎，他的解析工作主要有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;内容解析&lt;/strong&gt; 通过textile或者markdown实现&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;模板解析&lt;/strong&gt; 通过Liquid实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll traverses your site looking for files to process. Any files with YAML front matter are subject to processing. For each of these files, Jekyll makes a variety of data available via the Liquid templating system. The following is a reference of the available data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;摘自&lt;a href=&quot;http://jekyllrb.com/docs/variables/&quot;&gt;官方文档-variables&lt;/a&gt;，说明Jekyll解析会遍历网站目录找有YAML头的文件处理。我认为处理过程如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;解析yaml头，根据配置做相应处理（如看到layout就在_layout目录下找相应的模板进行合并）&lt;/li&gt;
  &lt;li&gt;遍历文件，根据文件内容，配置以及_config.yml填充Liquid变量&lt;/li&gt;
  &lt;li&gt;解析所有的markdown文件得到html文件&lt;/li&gt;
  &lt;li&gt;解析所有的html文件中的Liquid语法得到最终的html放到_site目录下边&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jekyll要求的目录结构&quot;&gt;Jekyll要求的目录结构&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;jekyll可以作为服务器吗&quot;&gt;Jekyll可以作为服务器吗&lt;/h2&gt;
&lt;p&gt;Jekyll的核心工作只是一个解析引擎，跟服务器是没有什么关系的，那为什么把Jekyll创建好的博客放到github pages上就可以访问了呢？&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Jekyll’s simplified build process with GitHub Pages is one of the biggest advantages of using Jekyll instead of other static site generators. GitHub Pages manages your site’s build process with a single push to your site’s publishing branch. This is Jekyll’s build process for managing your site:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Push file changes to your pages publishing branch&lt;/li&gt;
    &lt;li&gt;GitHub Pages publishes your site.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;摘自&lt;a href=&quot;https://help.github.com/articles/about-github-pages-and-jekyll/&quot;&gt;github pages的介绍&lt;/a&gt;，github pages是集成了Jekyll的，对于pages的仓库，只要push了新的change，github pages就会用Jekyll引擎重新生成一次，然后再发布。这个发布的实现其实还是github pages本身的服务器实现的，可以是nginx，apache等。所以Jekyll真正的功能应该是和Wordpres在一个层次上，就是把内容和模板转换成网页，只不过wordpress是把内容动态存放在mysql数据库中，而Jekyll是静态的markdown文件。&lt;/p&gt;

&lt;p&gt;Jekyll的程序中集成了开启服务的功能，执行命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以编译解析当前目录，然后打开4000端口提供web服务，可以作为本地测试的工具。&lt;/p&gt;
&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;官网的中文翻译&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;一个jekyll主题网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gohom.win/2015/11/28/Liquid-jekyll/&quot;&gt;基于Jekyll需要讲Liquid语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/web/%E6%B5%85%E8%B0%88jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/web/%E6%B5%85%E8%B0%88jekyll.html</guid>
        
        <category>web</category>
        
        <category>blog</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>vim的使用</title>
        <description>&lt;h2 id=&quot;我的vimrc&quot;&gt;我的.vimrc&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set nu
syntax on

&quot; 自定义键映射，方便使用
inoremap jk &amp;lt;Esc&amp;gt;
inoremap vv &amp;lt;Esc&amp;gt;:w&amp;lt;Enter&amp;gt;
nnoremap vv :w&amp;lt;Enter&amp;gt;
inoremap qq &amp;lt;Esc&amp;gt;:wq&amp;lt;Enter&amp;gt;
nnoremap qq :wq&amp;lt;Enter&amp;gt;

set ts=4
set expandtab
set autoindent

&quot; 显示下划线
set cursorline


&quot; Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'git://github.com/scrooloose/nerdtree.git'
call vundle#end()
&quot; Vundle end

set autochdir
let mapleader=&quot;,&quot;
let NERDTreeChDirMode=2
nnoremap &amp;lt;leader&amp;gt;f :NERDTree .&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;&amp;lt;Tab&amp;gt; &amp;lt;C-w&amp;gt;

&quot; 打开文件时定位到上次关闭的位置
autocmd BufReadPost *
\ if line(&quot;'\&quot;&quot;)&amp;gt;0&amp;amp;&amp;amp;line(&quot;'\&quot;&quot;)&amp;lt;=line(&quot;$&quot;) |
\ exe &quot;normal g'\&quot;&quot; |
\ endif

&quot; 插入文件头
autocmd BufNewFile *.py,*.sh, exec &quot;:call SetTitle()&quot;
let $author_name = &quot;abelx&quot;
let $author_email = &quot;theabelx@163.com&quot;

func SetTitle()
if &amp;amp;filetype == 'sh'
call setline(1,&quot;\###################################################################&quot;)
call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;))
call append(line(&quot;.&quot;)+1, &quot;\# Author: &quot;.$author_name)
call append(line(&quot;.&quot;)+2, &quot;\# mail: &quot;.$author_email)
call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;))
call append(line(&quot;.&quot;)+4, &quot;\#=============================================================&quot;)
call append(line(&quot;.&quot;)+5, &quot;\#!/bin/bash&quot;)
call append(line(&quot;.&quot;)+6, &quot;&quot;)
else
call setline(1,&quot;\###################################################################&quot;)
call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;))
call append(line(&quot;.&quot;)+1, &quot;\# Author: &quot;.$author_name)
call append(line(&quot;.&quot;)+2, &quot;\# mail: &quot;.$author_email)
call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;))
call append(line(&quot;.&quot;)+4, &quot;\#=============================================================&quot;)
call append(line(&quot;.&quot;)+5, &quot;\#!/usr/bin/python&quot;)
call append(line(&quot;.&quot;)+6, &quot;&quot;)
endif
endfunc
&quot; 插入文件头 end

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;全文替换&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; :%s/vivian/sky/g
 :1,$s/vivian/sky/g
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查找&lt;/p&gt;

    &lt;p&gt;/，n向后，N向前&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;粘贴时缩进的问题很烦&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; :set paste #粘贴前
 :set nopaste #粘贴后
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示特殊符号&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; :set list
 :set nolist
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;撤销 &amp;amp; 取消撤销&lt;/p&gt;

    &lt;p&gt;u &amp;amp; &amp;lt;C-r&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;杂记&quot;&gt;杂记&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;hjkl是vim模式的精髓，要慢慢体会。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://easwy.com/blog/archives/advanced-vim-skills-basic-move-method/&quot;&gt;一个讲vim的博客系列&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E5%B7%A5%E5%85%B7/vim%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%B7%A5%E5%85%B7/vim%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
        
        <category>vim</category>
        
        <category>linux</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>shell脚本的写法</title>
        <description>&lt;h2 id=&quot;变量&quot;&gt;变量&lt;/h2&gt;
&lt;h3 id=&quot;用户定义变量&quot;&gt;用户定义变量&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var1=&quot;123&quot;
echo $var1
echo &quot;${var1}test&quot;
var2=$var1
$var2=$var1 #不对

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;加不加括号都行，括号为了识别变量的边界&lt;/li&gt;
  &lt;li&gt;变量作为左值不加$，作为右值一定要加&lt;/li&gt;
  &lt;li&gt;赋值等号两边不能有空格&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;常用系统变量&quot;&gt;常用系统变量&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$#&lt;/td&gt;
      &lt;td&gt;参数个数，不包括文件名本身&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$0&lt;/td&gt;
      &lt;td&gt;文件名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$1&lt;/td&gt;
      &lt;td&gt;第一个参数，以此类推&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;数组&quot;&gt;数组&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arr1=(1 2 3) #初始化
arr1[0]=1 #赋值，下标范围没有限制
echo ${arr1[1]} #取值
echo ${#arr1[*]} #元素个数

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;注释&quot;&gt;注释&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 单行注释

&quot;
多行
注释
&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;运算符&quot;&gt;运算符&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-shell-basic-operators.html&quot;&gt;菜鸟教程运算符&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;括号&quot;&gt;括号&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/tttyd/article/details/11742241&quot;&gt;关于shell中各种括号的解释&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;方括号右边和其他字符之间一定要留空格&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ 1 -gt 1 ]
then
  echo 1
fi
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-shell.html&quot;&gt;shell菜鸟教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/%E8%AF%AD%E8%A8%80/shell%E8%84%9A%E6%9C%AC%E7%9A%84%E5%86%99%E6%B3%95.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AF%AD%E8%A8%80/shell%E8%84%9A%E6%9C%AC%E7%9A%84%E5%86%99%E6%B3%95.html</guid>
        
        <category>shell</category>
        
        <category>linux</category>
        
        
        <category>语言</category>
        
      </item>
    
  </channel>
</rss>
